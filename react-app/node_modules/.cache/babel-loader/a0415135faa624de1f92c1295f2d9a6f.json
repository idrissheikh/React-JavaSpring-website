{"ast":null,"code":"import _classCallCheck from \"/Users/idrissheikh-idris/.ssh/react/routing-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/idrissheikh-idris/.ssh/react/routing-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar API =\n/*#__PURE__*/\nfunction () {\n  function API() {\n    _classCallCheck(this, API);\n  }\n\n  _createClass(API, null, [{\n    key: \"getAllProducts\",\n    // returns Promise\n    // .then .catch\n    value: function getAllProducts() {\n      var url = \"http://localhost:9997/products\";\n      return new Promise(function (resolve, reject) {\n        fetch(url).then(function (res) {\n          return res.json();\n        }).then(function (products) {\n          return resolve(products);\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"getAllProductById\",\n    value: function getAllProductById(id) {\n      var url = \"http://localhost:9997/products/\" + id;\n      return new Promise(function (resolve, reject) {\n        fetch(url).then(function (res) {\n          return res.json();\n        }).then(function (product) {\n          return resolve(product);\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"postProduct\",\n    value: function postProduct(body) {\n      var url = \"http://localhost:9997/products\";\n      return new Promise(function (resolve, reject) {\n        fetch(url, {\n          method: \"POST\",\n          // or 'PUT'\n          body: JSON.stringify(body),\n          // data can be `string` or {object}!\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(function (res) {\n          return res.json();\n        }).then(function (data) {\n          return resolve(data);\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"putProduct\",\n    value: function putProduct(body) {\n      console.log(\"received product: \", body);\n      var url = \"http://localhost:9997/products/\" + body.product.id;\n      console.log(\"url: \", url);\n      return new Promise(function (resolve, reject) {\n        fetch(url, {\n          method: \"PUT\",\n          // or 'PUT'\n          body: JSON.stringify(body),\n          // data can be `string` or {object}!\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(function (res) {\n          return res.json();\n        }).then(function (data) {\n          return resolve(data);\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"deleteProduct\",\n    value: function deleteProduct(id) {\n      var url = \"http://localhost:9997/products/\" + id;\n      return new Promise(function (resolve, reject) {\n        fetch(url, {\n          method: \"DELETE\" // or 'PUT'\n\n        }).then(function () {\n          return resolve();\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"getUserById\",\n    value: function getUserById(id) {\n      var url = \"http://localhost:9997/merchant/\" + id;\n      return new Promise(function (resolve, reject) {\n        fetch(url).then(function (res) {\n          return res.json();\n        }).then(function (merchant) {\n          return resolve(merchant);\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"postUser\",\n    value: function postUser(merchant) {\n      var url = \"http://localhost:9997/merchants\";\n      return new Promise(function (resolve, reject) {\n        fetch(url, {\n          method: \"POST\",\n          // or 'PUT'\n          merchant: JSON.stringify(merchant),\n          // data can be `string` or {object}!\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(function (res) {\n          return res.json();\n        }).then(function (data) {\n          return resolve(data);\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n  }]);\n\n  return API;\n}();\n\nexport { API as default };","map":{"version":3,"sources":["/Users/idrissheikh-idris/.ssh/react/routing-app/src/services/api.js"],"names":["API","url","Promise","resolve","reject","fetch","then","res","json","products","catch","error","id","product","body","method","JSON","stringify","headers","data","err","console","log","merchant"],"mappings":"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","sourcesContent":["export default class API {\n  // returns Promise\n  // .then .catch\n  static getAllProducts() {\n    let url = \"http://localhost:9997/products\";\n    return new Promise((resolve, reject) => {\n      fetch(url)\n        .then(res => res.json())\n        .then(products => resolve(products))\n        .catch(error => reject(error));\n    });\n  }\n\n  static getAllProductById(id) {\n    let url = \"http://localhost:9997/products/\" + id;\n    return new Promise((resolve, reject) => {\n      fetch(url)\n        .then(res => res.json())\n        .then(product => resolve(product))\n        .catch(error => reject(error));\n    });\n  }\n\n  static postProduct(body) {\n    let url = \"http://localhost:9997/products\";\n    return new Promise((resolve, reject) => {\n      fetch(url, {\n        method: \"POST\", // or 'PUT'\n        body: JSON.stringify(body), // data can be `string` or {object}!\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => res.json())\n        .then(data => resolve(data))\n        .catch(err => reject(err));\n    });\n  }\n\n  static putProduct(body) {\n    console.log(\"received product: \", body);\n    let url = \"http://localhost:9997/products/\" + body.product.id;\n    console.log(\"url: \", url);\n    return new Promise((resolve, reject) => {\n      fetch(url, {\n        method: \"PUT\", // or 'PUT'\n        body: JSON.stringify(body), // data can be `string` or {object}!\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => res.json())\n        .then(data => resolve(data))\n        .catch(err => reject(err));\n    });\n  }\n\n  static deleteProduct(id) {\n    let url = \"http://localhost:9997/products/\" + id;\n    return new Promise((resolve, reject) => {\n      fetch(url, {\n        method: \"DELETE\" // or 'PUT'\n      })\n        .then(() => resolve())\n        .catch(err => reject(err));\n    });\n  }\n\n  static getUserById(id) {\n    let url = \"http://localhost:9997/merchant/\" + id;\n    return new Promise((resolve, reject) => {\n      fetch(url)\n        .then(res => res.json())\n        .then(merchant => resolve(merchant))\n        .catch(error => reject(error));\n    });\n  }\n\n  static postUser(merchant) {\n    let url = \"http://localhost:9997/merchants\";\n    return new Promise((resolve, reject) => {\n      fetch(url, {\n        method: \"POST\", // or 'PUT'\n        merchant: JSON.stringify(merchant), // data can be `string` or {object}!\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => res.json())\n        .then(data => resolve(data))\n        .catch(err => reject(err));\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}